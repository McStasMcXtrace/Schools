/*******************************************************************************
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2012, All rights reserved
*           Risoe National Laboratory, Roskilde, Denmark
*           Institut Laue Langevin, Grenoble, France
*
* Component: QMonitorSANS
*
* %I
* Written by: Martin Cramer Pedersen
* Based on a component by: SÃ¸ren Kynde
* Date: May 2, 2012
* Version: $Revision$
* Origin: KU-Life
* Release: McXtrace 1.0
*
* A circular detector measuring the radial average of intensity as a function 
* of the momentum transform in the sample.
*
* %D
* A simple component simulating the scattering from a box-shaped, thin solution
* of monodisperse, spherical particles.
*
* %P
* RadiusDetector	: [m]	Radius of the detector (in the xy-plane).
* DistanceFromSample: [m] 	Distance from the sample to this component.
* LambdaMax  		: [AA]	Max sensitivity in lambda - used to compute the
*							highest possible value of momentum transfer, q.
* NumberOfBins      : []	Number of bins in the r (and q).
* RFilename	        : []	File used for storing I(r).
* qFilename         : [] 	File used for storing I(q).
* restore_xray      : []	If set to 1, the component restores the original 
*							x-ray.
*
* %E
*******************************************************************************/

DEFINE COMPONENT QMonitorSANS

DEFINITION PARAMETERS (RFilename = "RDetector", qFilename = "QDetector", NumberOfBins = 100)

SETTING PARAMETERS (RadiusDetector = 1.0, DistanceFromSample = 1.0, LambdaMax = 1.0, restore_neutron = 0)

OUTPUT PARAMETERS (Nofq, Iofq, IofqSquared, NofR, IofR, IofRSquared)


//STATE PARAMETERS (x,y,z,vx,vy,vz,t,s1,s2,p)
//POLARISATION PARAMETERS (sx,sy,sz)

DECLARE
%{
	// Declarations
    double TwoThetaMax;
    double qMax;

	double Nofq[NumberOfBins];
    double Iofq[NumberOfBins];
    double IofqSquared[NumberOfBins];

	double NofR[NumberOfBins];
    double IofR[NumberOfBins];
    double IofRSquared[NumberOfBins];
%}

INITIALIZE
%{
	// Declarations
    int i;

	// Initializations
    for (i = 0; i < NumberOfBins; ++i) {
		Nofq[i] = 0.0f;
		Iofq[i] = 0.0f;
		IofqSquared[i] = 0.0f;
    }

	TwoThetaMax = atan(RadiusDetector / DistanceFromSample);
	qMax = 4 * PI * sin(TwoThetaMax / 2.0) / LambdaMax;
%}

TRACE
%{
	// Declarations
    int i;
    double TwoTheta;
	double Lambda;

	double R;
	double RLow;
	double RHigh;

    double q;
	double qLow;
	double qHigh;

	double TwoThetaLow; 
	double TwoThetaHigh;
	double AreaOfSlice;
    
    PROP_Z0;

	// Computation of R
    R = sqrt(pow(x, 2) + pow(y, 2));

	// Computation of q

    Lambda=(2.*PI/V2K)/sqrt(vx*vx+vy*vy+vz*vz);
    TwoTheta = atan(R / DistanceFromSample);
    q = 4.0 * PI * sin(TwoTheta / 2.0) / Lambda;

	// Put photon in the correct r-bin
	if (R < RadiusDetector) {
		i = floor(NumberOfBins * R / RadiusDetector);

		RLow = RadiusDetector / NumberOfBins * i;
		RHigh = RadiusDetector / NumberOfBins * (i + 1);

		TwoThetaLow = atan(RLow / DistanceFromSample);
		TwoThetaHigh = atan(RHigh / DistanceFromSample);

		AreaOfSlice = fabs((cos(2 * TwoThetaLow) - cos(2 * TwoThetaHigh)) * 2 * PI);
	
		++NofR[i];
		IofR[i] += p / AreaOfSlice;
		IofRSquared[i] += pow(p / AreaOfSlice, 2);
    }
      
	// Put photon in the correct q-bin
    if (q < qMax) {
		i = floor(NumberOfBins * q / qMax);

		qLow = qMax / NumberOfBins * i;
		qHigh = qMax / NumberOfBins * (i + 1);

		TwoThetaLow = asin(qLow * Lambda / (4 * PI));
		TwoThetaHigh = asin(qHigh * Lambda / (4 * PI));

		AreaOfSlice = fabs((cos(2 * TwoThetaLow) - cos(2 * TwoThetaHigh)) * 2 * PI);
	
		++Nofq[i];
		Iofq[i] += p / AreaOfSlice;
		IofqSquared[i] += pow(p / AreaOfSlice, 2);

		SCATTER;
    }

	// Restore xray if requested


    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
%}

SAVE
%{
	// Output I(r)
    DETECTOR_OUT_1D(
        "QMonitor - Radially averaged distribution",
        "Radius [m]",
        "I(r)",
        "r", 
		0.0f, 
		RadiusDetector, 
		NumberOfBins,
        &NofR[0],
		&IofR[0],
		&IofRSquared[0],
        RFilename
	);

	// Output I(q)
    DETECTOR_OUT_1D(
        "QMonitor - Distribution in q (Radially averaged)",
        "q [1 / AA]",
        "I(q)",
        "q", 
		0.0f, 
		qMax, 
		NumberOfBins,
        &Nofq[0],
		&Iofq[0],
		&IofqSquared[0],
        qFilename
	);
%}

MCDISPLAY
%{
	magnify("xy");
	circle("xy", 0, 0, 0, RadiusDetector);
%}

END
