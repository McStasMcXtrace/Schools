/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test (rename also the example and DEFINE lines below)
*
* %Identification
* Written by: Mads Bertelsen (mads.bertelsen@esss.se)
* Date: 4/3 2019
* Origin: European Spallation Source, DMSC
* %INSTRUMENT_SITE: Templates
*
* Reference solution for exercise at McStas school
*
* %Description
* Instrument longer description (type, elements, usage...)
*
* Example: mcrun test.instr <parameters=values>
*
* once your instrument is written and functional:
* - replace INSTRUMENT_SITE entry above with your Institution name as a single word
* - rename the instrument name after DEFINE INSTRUMENT below
* - update the parameter help in the following Parameters section
* - update the instrument description, and better add a usage example with a
*     sensible parameter set.
*
* %Parameters
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/
DEFINE INSTRUMENT reference(guide_length=3,wavelength=3)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
double wavevector;
double monochromator_theta;
double source_chopper_distance=4.5; // Distance from source to chopper
double chopper_delay;
double vselector_angular_frequency;
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
// Wish to calculate at what angle the monochromator should be rotated
//  in order to reflect the desired wavelength. First calculate the
//  wavevector using the built in constant PI.
wavevector = 2.0*PI/wavelength;
// Next the equation for elastic scattering Q = 2ksin(theta) is used to
//  calculate the scattering angle for a monochromator with PG which
//  has Q = 3.355. The result will be in radians, so it is converted
//  to degress using the built in constant RAD2DEG.
monochromator_theta = asin(3.355/2.0/wavevector)*RAD2DEG;

//calculate the required velocity selector frequency to allow the desired 
// wavelength through.
// The frequency is  given by nu = h/m_n * alpha/(2*pi*lambda*L)
vselector_angular_frequency=3956* 48.298*DEG2RAD /(2*PI*wavelength*0.25);

// Calculate the arrival time of the desired neutrons at the chopper.
// Use the built in conversion factor K2V from wavevector to velocity.
//  t = s/v
chopper_delay = source_chopper_distance/(wavevector*K2V);

%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

// tof source
COMPONENT source = Source_simple(
  xwidth=0.1,yheight=0.1,
  focus_xw=0.03,focus_yh=0.05,dist=2.0,
  lambda0=wavelength*0.6,dlambda=wavelength*0.45)
AT (0,0,0) RELATIVE Origin

// guide starting 2 m after source
COMPONENT guide = Guide_gravity(
  w1=0.03,h1=0.05,
  w2=0.03,h2=0.05,
  l=source_chopper_distance-2.0-0.2,
  R0=0.99,m=3,Qc=0.0217,alpha=2.0,W=0.003,
  G=-9.82)
AT (0,0,2) RELATIVE source

COMPONENT velocity_selector = V_selector(
    nslit=72, xwidth=0.03, yheight=0.05, zdepth=0.30, 
    radius=0.12, alpha=48.298, length=0.25, d=0.0004, nu=vselector_angular_frequency, nslit=72
)
AT(0,0,source_chopper_distance) RELATIVE source

COMPONENT guide2 = Guide_gravity(
  w1=0.03,h1=0.05,
  w2=0.03,h2=0.05,
  l=guide_length - source_chopper_distance + 2.0 - 0.1,
  R0=0.99,m=3,Qc=0.0217,alpha=2.0,W=0.003,
  G=-9.82)
AT (0,0,source_chopper_distance - 2.0 + 0.2) RELATIVE guide

// monochromator 30 cm after guide
COMPONENT monochromator = Monochromator_curved(
  NV=5,NH=1, // five crystals stack vertically
  yheight=0.01,zwidth=0.03, // each crystal 1 cm tall, 3 cm wide
  gap=0.005, // 5 mm gap between the crystals
  mosaic=30,r0=1.0, // 30 arc min mosaic, 100 % reflection
  Q=3.355,order=0, // base scattering vector and all orders simulated
  RV=1.0,RH=0) // focusing vertically 1.0 m from monochromator
AT (0,0,guide_length+0.3) RELATIVE guide
ROTATED (0,monochromator_theta,0) RELATIVE guide

// An additional component is used to define the direction of
//  two theta so that the z direction match the beam direction.
COMPONENT two_theta_direction = Arm()
AT (0,0,0) RELATIVE monochromator
ROTATED (0,monochromator_theta,0) RELATIVE monochromator

// monitors
// Position sensetive detector
COMPONENT PSD_2D = PSD_monitor(
  xwidth=0.05,nx=200,
  yheight=0.05,ny=200,
  filename="PSD_2D.dat",restore_neutron=1)
AT (0,0,1.0) RELATIVE two_theta_direction

// Divergence monitor
COMPONENT DIV_2D = Divergence_monitor(
  xwidth=0.05,nh=200,maxdiv_h=3.0,
  yheight=0.05,nv=200,maxdiv_v=3.0,
  filename="DIV_2D.dat",restore_neutron=1)
AT (0,0,0) RELATIVE PREVIOUS

// Wavelength monitor
COMPONENT Wavelength_1D = L_monitor(
  xwidth=0.05,yheight=0.05,
  Lmin=wavelength*0.1,Lmax=wavelength*1.1,nL=600,
  filename="Wavelength_1D.dat",restore_neutron=1)
AT (0,0,0) RELATIVE PREVIOUS

// Acceptance diagram
COMPONENT POS_DIV_2D = DivPos_monitor(
  xwidth=0.05,yheight=0.05,nh=200,
  ndiv=200,maxdiv_h=3.0,
  filename="POS_DIV_2D.dat",restore_neutron=1)
AT (0,0,0) RELATIVE PREVIOUS

/* The END token marks the instrument definition end */
END
